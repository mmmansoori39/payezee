export const ErrorMessage = {
  merchantNotFound: "Merchant not found",
  paymentNotFound: "Payment not found",
  userNotFound: "User not found",
  unauthorized: "Unauthorized token",
  userExists: "User already exists",
  userNotExist: "User does not exist",
  incorrectPwd: "Password is incorrect",
  invalidEmail: "Invalid email",
  internalServerError: "Internal server error",
  storeNotFound: "Store not found",
  loungeNotFound: "Lounge not found",
  itemNotFound: "Item not found",
  cartNotFound: "Cart not found with this trace_cart_id",
  invalidRequestBody: "Request body has invalid parameter or value",
  authTokenNotFound: "Auth token not found",
  middlewareError: "Some error occoured in middleware",
  invalidStatus: "Cart has invalid status",
  invalidUserInteractionType: "Invalid user interaction type",
  alreadyUpdated: "Cart is already updated",
  invalidItemCodeInUserInteraction: "This item code does not exist in user interaction",
  invalidItemCode: "This item code does not exist in item collection",
  channelNameNotFound: "Channel name is required",
  uidNotFound: "Uid is required.",
  brandNotFound: "Brand not found",
  startDateNotFound: "You have not provided date_from in params.",
  error: "error",
  errorOnServer: "error occurred on server",
  passwordRule: "Password must contain at least one letter and one number",
  authFailed: "Authentication failed",

  venueNotFound: "Venue not found"
};

export const SuccessMessage = {
  updatedTransactionInfo: "Updated Transaction Info",
  updateMerchantSuccess: "Merchant is successfully updated.",
  createMerchantSuccess: "Merchant is successfully created.",
  createPaymentSuccess: "Payment is successfully created.",
  cartStatusUpdateSuccess: "Cart status is successfully updated.",
  cartUpdateSuccess: "Cart is successfully updated.",
  getUserInteractionSuccess: "Successfully fetched userInteractions",
  addUserInteractionSuccess: "User interaction is successfully added.",
  cartCreateSuccess: "Cart is successfully created.",
  registerUserSuccess: "User is successfully registered.",
  updateUserSuccess: "User address is successfully updated.",
  exitUserSuccess: "User is successfully exited.",
  createBrandSuccess: "Brand is successfully created.",
  createProductSuccess: "Product is successfully created.",
  updateProductSuccess: "Product is successfully updated.",
  createRtcTokenSuccess: "RTC token is successfully created.",
  createLoungeSuccess: "Lounge is successfully created.",
  updateLoungeSuccess: "Lounge is successfully updated.",
  fetchSuccess: "Successfully fetched.",
  success: "success",
  authSuccess: "Authentication success",
  tokenRefresh: "Token refreshed successfully",
  loginSuccess: "Login success",

  createVenueSuccess: "Venue is successfully created.",
  updateVenueSuccess: "Venue is successfully updated."
};
